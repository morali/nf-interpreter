//
// Copyright (c) 2019 The nanoFramework project contributors
// See LICENSE file in the project root for full license information.
//

#include <nanoHAL.h>
#include <nanoCLR_Interop.h>
#include <nanoCLR_Runtime.h>
#include <nanoCLR_Checks.h>
#include <nf_rt_native.h>

#if !defined(NXP_USE_RTC) 
    #error "Need the RTC to be enabled. Please set CMake option NF_FEATURE_RTC to ON."
#endif

#include "External_RTC.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// these functions are the real implementation of the 'weak' ones declared at src\CLR\Runtime.Native\nf_rt_native_nanoFramework_Runtime_Native_Rtc_stubs.cpp //
// the stubs for this class are generated by nanoFramework.Runtime.Native                                                                                    //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HRESULT Library_nf_rt_native_nanoFramework_Runtime_Native_Rtc::Native_RTC_SetSystemTime___STATIC__BOOLEAN__I4__U1__U1__U1__U1__U1__U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER();
    {
        struct tm rtcTime;

        rtcTime.tm_year  = (uint16_t) stack.Arg0().NumericByRef().s4 - 1900; // User is allowed to set time in the range of 2000 - 2099
        if(rtcTime.tm_year > 199 || rtcTime.tm_year < 100)
        {
            NANOCLR_SET_AND_LEAVE(CLR_E_INVALID_PARAMETER); 
        }
        rtcTime.tm_mon   = (uint8_t) stack.Arg1().NumericByRef().u1 - 1; 
        rtcTime.tm_mday  = (uint8_t) stack.Arg2().NumericByRef().u1;   
        rtcTime.tm_hour  = (uint8_t) stack.Arg4().NumericByRef().u1;  
        rtcTime.tm_min   = (uint8_t )stack.Arg5().NumericByRef().u1;
        rtcTime.tm_sec   = (uint8_t) stack.Arg6().NumericByRef().u1;
        rtcTime.tm_isdst = 0;
        rtcTime.tm_wday  = 0;
        rtcTime.tm_yday  = 0; 

        RTC_SetTime(&rtcTime);
        
        // Return value to the managed application
        stack.SetResult_Boolean(true);
    }
    NANOCLR_NOCLEANUP();
}
